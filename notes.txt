GENERAL:


Create UI reducer to control views for BOOKER or DEEJAY. Save route changes in store.

// OR //

Create user action types/creators/reducer that handles DEEJAY or BOOKER mode


On route changes (looking for anything /booker or /deejay), dispatch an action to update the user state accordingly. This will use one of React's componentDidMount lifecycle method






// OPEN 1/4/19
Losing track of which feature has priority right now. Styling right now is at ZERO, so that could definitely be improved. But I need the main functionality to be working first â€” namely, all the information flow between bookers and deejays needs to be tight before moving on to things like messages and reviews.

Maybe start by getting the deejay components to function like the booker components, as a way to dive back in (since it's been two weeks since I've actually put work into this)

Also consider using REACT CONTEXT to keep track of BOOKER/DEEJAY state? .......

Also maybe consider moving these notes to something organized like Trello or Asana ? ...

// OPEN 12/19/18 ---- TBD
SEARCH FILTER: currently WIP. see Gig-Main for early version of filter being implemented under Browse Gigs

need to clean up component hierarchy of FILTER / GIG LIST / etc.
could also just remove the GIGLIST from NAVBAR - only gonna need gig list if already in BOOKER or DEEJAY mode



// OPEN 12/13/18
also need to create some condition for not allowing a user to hit the 'bookers/new' route if they have a booker profile.

  (protect against the front-end route by checking state for a user's booker id)
  (protect backend by making a constraint on the models; allow only one deejay/booker id per user)
// DONE 12/17/18

// OPEN 12/13/18
need to redirect to '/bookers' from '/bookers/new' after submit (use history.push?)
// DONE 12/14/18



///////////////////////////////////////////////////////////

MAIN COMPONENTS

Profiles

Gig Lists

Calendar

Messages

Reviews

Finalize Styling

OAUTH
Embedded Players
Social Media Links
Payment system



///////////////////////////////


API's to integrate after MVP:

  Facebook (event creation?)
  Instagram
  Soundcloud
  Mixcloud
  Bandcamp
  Spotify

  Google (login)
  Paypal (payment)


/////////

If completed, things I can be proud of:

Fullstack NodeJS/Express/React/Redux application
Postgres/Sequelize
Design, styling, UI/UX
Calendar
Chat functionality with websockets
API integrations
Testing (not TDD, but there are tests)
